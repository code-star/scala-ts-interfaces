@(imports: Seq[String], classes: Seq[String], targetFile: String, useSemicolons: Boolean)

package com.scalatsi.generator

import _root_.com.scalatsi._
import _root_.com.scalatsi.TypescriptType._

/** User imports */
@for(imp <- imports) {
import @imp }

object ExportTypescript extends DefaultTSTypes {
  import _root_.com.{ scalatsi => ts }
  import _root_.scala.collection.{ immutable => im }

  val logger = _root_.com.scalatsi.output.OutputLogging.logger

  // If you get a generator or implicit not found error here, make sure you have defined a TSType[T] implicit and imported it
  val toOutput: im.Map[String, ts.TypescriptType] = im.Map[String, ts.TypescriptType](
    @for(userClass <- classes) {
      checkImplicit("""@userClass""",ts.TSType.getOrGenerate[@userClass]), }
  )

  val options = ts.output.OutputOptions(
    targetFile = new _root_.java.io.File("""@targetFile"""), // Warning: always use literal string here for windows paths with \
    styleOptions = ts.output.StyleOptions(
      semicolons = @useSemicolons
    )
  )

  def main(args: Array[String]): Unit = {
    ts.output.WriteTSToFiles.generate(options)(toOutput)
  }

  def checkImplicit[T](name: String, tsType: TSType[T]): (String, ts.TypescriptType) = {
    if(tsType == null) {
      logger.exit(s"Implicit TSType[$name] was null. This is usually caused by doing: implicit val ...: TSType[T] = TSType.getOrGenerate[T]")
    } else {
      name -> tsType.get
    }
  }
}
